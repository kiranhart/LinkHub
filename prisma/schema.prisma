datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model HubContent {
    id     String  @id @default(cuid())
    type   String  @default("link")
    title  String
    link   String?
    clicks Int?    @default(0)

    owningHub   Hub  @relation(fields: [hubId], references: [id], onDelete: Cascade)
    createdUser User @relation(fields: [userId], references: [id])

    active Boolean @default(true)
    adult  Boolean @default(false)
    hubId  String
    userId String
}

model Hub {
    id                String  @id @default(cuid())
    username          String  @unique
    name              String
    description       String?
    picture           String?
    pictureDeleteHash String?

    public Boolean @default(true)
    adult  Boolean @default(false)

    theme String? @default("custom")

    backgroundType      String? @default("flat")
    backgroundColor     String? @default("CB94F8")
    backgroundDirection String? @default("down")

    buttonType        String? @default("FillRounded")
    buttonColor       String? @default("FFFFFF")
    buttonShadowColor String? @default("000000")
    buttonTextColor   String? @default("000000")

    textColor String? @default("000000")

    content      HubContent[]
    contentOrder String?

    owner  User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index(username)
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    Hub        Hub[]
    HubContent HubContent[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}
